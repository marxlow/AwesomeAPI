(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["api"] = factory();
	else
		root["api"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("express");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _momentTimezone = __webpack_require__(12);

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function timeLog(req, res, next) {
  console.log('> Time:', (0, _momentTimezone2.default)().tz('America/New_York').format('LLLL'));
  next();
}

exports.default = timeLog;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("axios");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("dotenv");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = __webpack_require__(2);

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var request = _axios2.default.create({});

function coinbase() {
  var _this = this;

  this.prices = {
    // Returns the current prices of all available currencies from Coinbase
    getSpotAll: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(currency) {
        var url, response, data, result, i;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(currency.toUpperCase() !== 'USD')) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Error: We only allow USD for now');

              case 2:
                url = 'https://api.coinbase.com/v2/prices/' + currency + '/spot';
                _context.next = 5;
                return request.get(url);

              case 5:
                response = _context.sent;
                data = response.data.data;
                result = {};

                for (i = 0; i < data.length; i++) {
                  result[data[i].base] = '' + parseFloat(data[i].amount).toFixed(2);
                }
                return _context.abrupt('return', result);

              case 10:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function getSpotAll(_x) {
        return _ref.apply(this, arguments);
      }

      return getSpotAll;
    }()
  }, this.exchanges = {
    // Returned rates will define the exchange rate for one unit of the base currency
    get: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(currency) {
        var url, response, data, rates;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(currency.length === 0)) {
                  _context2.next = 2;
                  break;
                }

                throw new Error('Currency empty');

              case 2:
                url = 'https://api.coinbase.com/v2/exchange-rates?currency=' + currency;
                _context2.next = 5;
                return request.get(url);

              case 5:
                response = _context2.sent;
                data = response.data.data;
                rates = data.rates;
                return _context2.abrupt('return', rates);

              case 9:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, _this);
      }));

      function get(_x2) {
        return _ref2.apply(this, arguments);
      }

      return get;
    }()
  };
}

var Coinbase = new coinbase();
exports.default = Coinbase;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(23);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(6);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(9);

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _http = __webpack_require__(10);

var _http2 = _interopRequireDefault(_http);

var _arbitrageRouter = __webpack_require__(11);

var _arbitrageRouter2 = _interopRequireDefault(_arbitrageRouter);

var _currencyRouter = __webpack_require__(14);

var _currencyRouter2 = _interopRequireDefault(_currencyRouter);

var _coinbaseRouter = __webpack_require__(16);

var _coinbaseRouter2 = _interopRequireDefault(_coinbaseRouter);

var _gdaxRouter = __webpack_require__(17);

var _gdaxRouter2 = _interopRequireDefault(_gdaxRouter);

var _twitterRouter = __webpack_require__(30);

var _twitterRouter2 = _interopRequireDefault(_twitterRouter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

if (process.env.NODE_ENV === 'local') {
  __webpack_require__(3).config();
}

var app = (0, _express2.default)();

/* Creates server and web socket */
var server = _http2.default.createServer(app);

/* Set up apps with routers and their root URLs here */
app.use('/arbitrage', _arbitrageRouter2.default);
app.use('/currency', _currencyRouter2.default);
app.use('/coinbase', _coinbaseRouter2.default);
app.use('/twitter', _twitterRouter2.default);
app.use('/gdax', _gdaxRouter2.default);

console.log('> Here is your port: ', process.env.PORT);

/* Initialize server locally */
server.listen(process.env.PORT, function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(error) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (error) {
              console.log('Error initializing server: ' + error);
            }
            console.log('Server is ready on http://localhost:' + process.env.PORT);

          case 2:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("babel-polyfill");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _timeLog = __webpack_require__(1);

var _timeLog2 = _interopRequireDefault(_timeLog);

var _arbitrage = __webpack_require__(13);

var _arbitrage2 = _interopRequireDefault(_arbitrage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var arbitrageRouter = _express2.default.Router();
arbitrageRouter.use(_timeLog2.default); // Logs the time when the currencyRouter is called

arbitrageRouter.get('/calculate', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _arbitrage2.default.btc.calculate();

          case 3:
            result = _context.sent;

            res.status(200).send(result);
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](0);

            res.status(500).send({ error: _context.t0.message });

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 7]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

exports.default = arbitrageRouter;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = require("moment-timezone");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _coinbase = __webpack_require__(5);

var _coinbase2 = _interopRequireDefault(_coinbase);

var _axios = __webpack_require__(2);

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// TODO: Refactor request into a helper function
var request = _axios2.default.create({});

// Arbitrary chosen, for testing.
var PRECISION = 8;

function arbitrage() {
  var _this = this;

  // Use Bitcoin (on Coinbase), SGD, USD as elements in the Arbitrage
  this.btc = {
    calculate: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(capital) {
        var profitRate, capitalCurrency, otherCurrency, capitalToBtc, btcToOther, otherToCapital, currencyExchangeRates, usdToSgd, sgdToUsd, usdCryptoPrices, btcToUsd, usdToBtc, sgdBtcExchangeRates, btcToSgd, sgdToBtc, btcSoldForSgd, usdRevenue, btcSoldForUsd, sgRevenue;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                profitRate = 0;
                capitalCurrency = ''; // Currency which user should use to purchase BTC

                otherCurrency = ''; // Currency which user should sell BTC for

                capitalToBtc = 0;
                btcToOther = 0;
                otherToCapital = 0;

                // Get exchange rate of SGD with 1 USD

                _context.next = 8;
                return _coinbase2.default.exchanges.get('USD');

              case 8:
                currencyExchangeRates = _context.sent;
                usdToSgd = currencyExchangeRates['SGD'];
                sgdToUsd = (1 / usdToSgd).toFixed(PRECISION);
                // Get exchange rate of 1 USD for 1 BTC in coinbase

                _context.next = 13;
                return _coinbase2.default.prices.getSpotAll('USD');

              case 13:
                usdCryptoPrices = _context.sent;
                btcToUsd = usdCryptoPrices['BTC'];
                usdToBtc = (1 / btcToUsd).toFixed(PRECISION);
                // Get exchange rate of 1 SGD for 1 BTC in Singapore market (API returns 8 dp)

                _context.next = 18;
                return request.get('https://blockchain.info/ticker');

              case 18:
                sgdBtcExchangeRates = _context.sent;
                btcToSgd = sgdBtcExchangeRates.data['SGD'].last;
                sgdToBtc = (1 / btcToSgd).toFixed(PRECISION);
                /* Calculate potential profit from following steps if any
                 * 1. USD buys "x" BTC on "coinbase"
                 * 2. BTC sells for "y" SGD on "Singapore Market"
                 * 3. "y" SGD converts back to USD
                */

                btcSoldForSgd = usdToBtc * btcToSgd;
                usdRevenue = btcSoldForSgd * sgdToUsd;

                profitRate = (usdRevenue - 1).toFixed(PRECISION);
                capitalCurrency = 'USD';
                otherCurrency = 'SGD';
                capitalToBtc = usdToBtc;
                btcToOther = btcToSgd;
                otherToCapital = sgdToUsd;
                if (profitRate < 0) {
                  /* Reverse Arbitrage by starting with 1 SGD,
                   * 1. SGD buys "x" BTC on "Singapore Market"
                   * 2. BTC sells for "y" USD on "Coinbase"
                   * 3. "y" USD converts back to SGD
                  */
                  btcSoldForUsd = sgdToBtc * btcToUsd;
                  sgRevenue = btcSoldForUsd * usdToSgd;

                  profitRate = (sgRevenue - 1).toFixed(PRECISION);
                  capitalCurrency = 'SGD';
                  otherCurrency = 'USD';
                  capitalToBtc = sgdToBtc;
                  btcToOther = btcToUsd;
                  otherToCapital = usdToSgd;
                }
                // console.log('> Profit:', profitRate);
                // console.log('> Capital currency:', capitalCurrency);
                // console.log('> Other currency:', otherCurrency);
                // console.log('> Capital to BTC', capitalToBtc);
                // console.log('> BTC to Other currency', btcToOther);
                // console.log('> Other currency to Capital', otherToCapital);
                return _context.abrupt('return', {
                  profitRate: profitRate,
                  capitalCurrency: capitalCurrency,
                  otherCurrency: otherCurrency,
                  capitalToBtc: capitalToBtc,
                  btcToOther: btcToOther,
                  otherToCapital: otherToCapital
                });

              case 31:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function calculate(_x) {
        return _ref.apply(this, arguments);
      }

      return calculate;
    }()
  };
}

/* Initialize with key and secret */
var Arbitrage = new arbitrage();
exports.default = Arbitrage;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _currency = __webpack_require__(15);

var _currency2 = _interopRequireDefault(_currency);

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _timeLog = __webpack_require__(1);

var _timeLog2 = _interopRequireDefault(_timeLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var currencyRouter = _express2.default.Router();

currencyRouter.use(_timeLog2.default); // Logs the time when the currencyRouter is called

/* Define routes */
currencyRouter.get('/exchange/live/USD', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return _currency2.default.exchange.getLive();

          case 3:
            result = _context.sent;

            res.status(200).send(result);
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context['catch'](0);

            res.status(500).send({ error: _context.t0.message });

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 7]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

exports.default = currencyRouter;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = __webpack_require__(2);

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

if (process.env.NODE_ENV !== 'production') {
  __webpack_require__(3).config();
}

// Using Currency Layer API. Docs at: https://currencylayer.com/quickstart
var accessKey = process.env.CURRENCY_LAYER_KEY;

// Create instance of axios for calling currency Layer API
var request = _axios2.default.create({});

function currency() {
  var _this = this;

  this.exchange = {
    getLive: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var url, response, data, quotes, currency;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = 'http://www.apilayer.net/api/live?access_key=' + accessKey;
                _context.next = 3;
                return request.get(url);

              case 3:
                response = _context.sent;
                data = response.data;
                quotes = data.quotes;


                for (currency in quotes) {}
                //   console.log('> Response:', quotes);
                return _context.abrupt('return', quotes);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function getLive() {
        return _ref.apply(this, arguments);
      }

      return getLive;
    }()
  };
}

/* Initialize with key and secret */
var Currency = new currency();
exports.default = Currency;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _coinbase = __webpack_require__(5);

var _coinbase2 = _interopRequireDefault(_coinbase);

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _timeLog = __webpack_require__(1);

var _timeLog2 = _interopRequireDefault(_timeLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var coinbaseRouter = _express2.default.Router();

coinbaseRouter.use(_timeLog2.default); // Logs the time when the coinbaseRouter is called

/* Define routes */
coinbaseRouter.get('/prices/:currency', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var currency, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            currency = req.params.currency;
            _context.next = 4;
            return _coinbase2.default.prices.getSpotAll(currency);

          case 4:
            result = _context.sent;

            res.status(200).send(result);
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context['catch'](0);

            res.status(500).send({ error: _context.t0.message });

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 8]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

coinbaseRouter.get('/exchange-rates/:currency', function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(req, res) {
    var currency, result;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            currency = req.params.currency;
            _context2.next = 4;
            return _coinbase2.default.exchanges.get(currency);

          case 4:
            result = _context2.sent;

            res.status(200).send(result);
            _context2.next = 11;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2['catch'](0);

            res.status(500).send({ error: _context2.t0.message });

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 8]]);
  }));

  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}());

exports.default = coinbaseRouter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _gdax = __webpack_require__(18);

var _gdax2 = _interopRequireDefault(_gdax);

var _timeLog = __webpack_require__(1);

var _timeLog2 = _interopRequireDefault(_timeLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var gdaxRouter = _express2.default.Router();

gdaxRouter.use(_timeLog2.default); // Logs the time when the gdaxRouter is called

/* Define routes */
gdaxRouter.get('/prices/:currency', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var currency, result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            currency = req.params.currency;
            _context.next = 4;
            return _gdax2.default.prices.getSpotAll({ currency: currency });

          case 4:
            result = _context.sent;

            res.status(200).send(result);
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context['catch'](0);

            res.status(500).send({ error: _context.t0.message });

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 8]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

exports.default = gdaxRouter;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ws = __webpack_require__(19);

var _ws2 = _interopRequireDefault(_ws);

var _axios = __webpack_require__(2);

var _axios2 = _interopRequireDefault(_axios);

var _throttle = __webpack_require__(20);

var _throttle2 = _interopRequireDefault(_throttle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var request = _axios2.default.create({});

var GDAX_PRODUCTS = ['BTC', 'ETH', 'LTC']; // GDAX API Does not support BCH atm.

function gdax() {
  var _this = this;

  this.prices = {
    // Returns the current prices of all available currencies from Coinbase
    getSpotAll: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
        var currency = _ref.currency;
        var result, i, product, url, response, data;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(currency.toUpperCase() !== 'USD')) {
                  _context.next = 2;
                  break;
                }

                throw new 'Error: We only allow USD for now'();

              case 2:
                result = {};
                i = 0;

              case 4:
                if (!(i < GDAX_PRODUCTS.length)) {
                  _context.next = 15;
                  break;
                }

                product = appendCurrency(GDAX_PRODUCTS[i]); // from BTC to BTC-USD

                url = 'https://api-public.sandbox.gdax.com/products/' + product + '/trades';
                _context.next = 9;
                return request.get(url);

              case 9:
                response = _context.sent;
                data = response.data;

                result[GDAX_PRODUCTS[i]] = '$' + parseFloat(data[0].price).toFixed(2) + ' USD';

              case 12:
                i++;
                _context.next = 4;
                break;

              case 15:
                return _context.abrupt('return', result);

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function getSpotAll(_x) {
        return _ref2.apply(this, arguments);
      }

      return getSpotAll;
    }()

  };
}

// For WebSocket
function initializeServer(currency) {
  var ws = new _ws2.default('wss://ws-feed.gdax.com');
  ws.on('open', function () {
    console.log('> Server has opened. Here is the date now.');
    ws.send(Date.now());
  });
  ws.on('close', function () {
    console.log('> Server has closed. Here is the date now in console.', Date.now());
  });
  /* Runs throttle function every 500 milliseconds */
  ws.on('message', (0, _throttle2.default)(function (gdaxData) {
    console.log('> This is your Gdax Data:', gdaxData);
  }, 500));
}

/*
 * If a currency does not end with 'USD', add 'USD' string to it.
*/
function appendCurrency(currency) {
  var currencyArray = currency.split('-');

  if (currencyArray[1] !== 'USD') {
    return currency + '-USD';
  }
  return currency;
}

var Gdax = new gdax();
exports.default = Gdax;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("ws");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var debounce = __webpack_require__(21),
    isObject = __webpack_require__(4);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4),
    now = __webpack_require__(22),
    toNumber = __webpack_require__(24);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        result = wait - timeSinceLastCall;

    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(6);

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(4),
    isSymbol = __webpack_require__(25);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(26),
    isObjectLike = __webpack_require__(29);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(7),
    getRawTag = __webpack_require__(27),
    objectToString = __webpack_require__(28);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(7);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 28 */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 29 */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _twitter = __webpack_require__(31);

var _twitter2 = _interopRequireDefault(_twitter);

var _express = __webpack_require__(0);

var _express2 = _interopRequireDefault(_express);

var _timeLog = __webpack_require__(1);

var _timeLog2 = _interopRequireDefault(_timeLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var twitterRouter = _express2.default.Router();

twitterRouter.use(_timeLog2.default); // Logs the time when the twitterRouter is called

/* Define routes */
twitterRouter.get('/:user_name/tweets/:count', function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
    var _req$params, user_name, count, result;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _req$params = req.params, user_name = _req$params.user_name, count = _req$params.count;
            _context.next = 4;
            return _twitter2.default.user.getTweets({ user_name: user_name, count: count });

          case 4:
            result = _context.sent;

            res.status(200).send(result);
            _context.next = 11;
            break;

          case 8:
            _context.prev = 8;
            _context.t0 = _context['catch'](0);

            res.status(500).send({ error: _context.t0.message });

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 8]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());

exports.default = twitterRouter;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = __webpack_require__(2);

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// if (process.env.NODE_ENV === 'local') {
//   require('dotenv').config();
// }

__webpack_require__(3).config();

/* Create instance of axios for calling Twitter API*/
var request = _axios2.default.create({
  // baseUrl: `https://api.twitter.com/1.1/`,
  auth: {
    consumer_key: process.env.TWITTER_KEY,
    consumer_secret: process.env.TWITTER_SECRET
  },
  headers: {
    'Content-Type': 'application/json'
  }
});

function twitter() {
  var _this = this;

  this.user = {
    getTweets: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
        var user_name = _ref.user_name,
            count = _ref.count;
        var url, params, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                url = 'https://api.twitter.com/1.1/statuses/user_timeline.json';
                params = {
                  count: count,
                  screen_name: user_name,
                  include_rts: false, // No retweets! We only want the real stuff
                  trim_user: true, // Ignores user data
                  excluse_replies: true // Replies of User to others... We don't want that
                };

                console.log('> key:', process.env.TWITTER_KEY);
                console.log('> Your params:', user_name, count);
                _context.next = 6;
                return request.get(url, { params: params });

              case 6:
                response = _context.sent;

                console.log('> Response:', response);

              case 8:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this);
      }));

      function getTweets(_x) {
        return _ref2.apply(this, arguments);
      }

      return getTweets;
    }()
  };
}

/* Initialize with key and secret */
var Twitter = new twitter();
exports.default = Twitter;

/***/ })
/******/ ]);
});
//# sourceMappingURL=awesomeapi.min.js.map